{"version":3,"sources":["routes/survey.ts"],"names":[],"mappings":"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","file":"routes/survey.js","sourcesContent":["import express = require('express');\nimport passport = require('passport');\nvar router = express.Router();\n\n// db references\nimport mongoose = require('mongoose');\nimport surveyModel = require('../models/survey');\n\nimport Survey = surveyModel.Survey;\n\n/* Utility Function to check if user is authenticated */\nfunction requireAuth(req:express.Request, res:express.Response, next: any) {\n    // check if the user is logged in\n    if (!req.isAuthenticated()) {\n      return res.redirect('/login');\n    }\n    next();\n  }\n\n// GET - show main survey page\nrouter.get('/',requireAuth, (req: express.Request, res: express.Response, next: any) => {\n  // use the Survey model to query the Surveys collection\n  Survey.find(function(error, survey) {\n    if (error) {\n      console.log(error);\n      res.end(error);\n    } \n    else {\n      // no error, we found a list of surveys\n      res.render('survey/index', {\n        title: 'Survey',\n        survey: survey,\n        displayName: req.user ? req.user.displayName : ''\n      });\n    }\n  });\n});\n\n/* GET browse surveys page. */\n/*router.get('/browse-surveys', (req: express.Request, res: express.Response, next: any) => {\n  res.render('browse-surveys', {\n    title: 'Browse-surveys',\n    displayName: req.user ? req.user.displayName : ''\n  });\n});*/\n\n// Show page with survey options to create\nrouter.get('/add', requireAuth, function(req: express.Request, res: express.Response, next: any) {\n  res.render('survey/add', {\n    title: 'Choose your type of survey',\n    displayName: req.user ? req.user.displayName : ''\n  });\n});\n\n// GET add page - show the blank form\nrouter.get('/shortquestions-add', requireAuth, function(req: express.Request, res: express.Response, next: any) {\n  res.render('survey/shortquestions-add', {\n    title: 'Add Short Questions',\n    displayName: req.user ? req.user.displayName : ''\n  });\n});\n\n// POST add page - save the new survey\nrouter.post('/shortquestions-add', function(req: express.Request, res: express.Response, next: any) {\n  Survey.create({\n    surveyTitle: req.body.surveyTitle,\n    SurveyType: req.body.surveyType,\n    shortQuest1: req.body.shortQuest1,\n    shortQuest2: req.body.shortQuest2,\n    shortQuest3: req.body.shortQuest3,\n    shortQuest4: req.body.shortQuest4,\n    shortQuest5: req.body.shortQuest5,\n    displayName: req.body.displayName       \n  }, function(error, Survey) {\n    // did we get back an error or valid Survey object?\n    if (error) {\n      console.log(error);\n      res.end(error);\n    }\n    else {\n      res.redirect('/dashboard');\n    }\n  })\n});\n\n\n// GET edit page - show the current survey in the form\nrouter.get('/:id', (req: express.Request, res: express.Response, next: any) => {\n\n  var id = req.params.id;\n\n  Survey.findById(id, (error, survey) => {\n    if (error) {\n      console.log(error);\n      res.end(error);\n    }\n    else {\n      //show the edit view\n      res.render('survey/edit', {\n        title: 'Survey Details',\n        survey: survey,\n        displayName: req.user ? req.user.displayName : ''\n      });\n    }\n  });\n});\n\n// POST edit page - update the selected survey\nrouter.post('/:id', (req: express.Request, res: express.Response, next: any) => {\n\n    // grab the id from the url parameter\n    var id = req.params.id;\n\n    // create and populate an survey object\n    var survey = new Survey({\n      _id: id,\n      surveyTitle: req.body.surveyTitle,\n      surveyContent: req.body.surveyContent,\n      idName: req.body.idName\n    });\n\n    // run the update using mongoose and our model\n    Survey.update({ _id: id }, survey, (error) => {\n      if (error) {\n        console.log(error);\n        res.end(error);\n      }\n      else {\n        res.redirect('/survey');\n      }\n    });\n  });\n\n// GET delete survey\nrouter.get('/delete/:id', (req: express.Request, res: express.Response, next: any) => {\n\n    // get the id from the url\n    var id = req.params.id;\n\n    // use the model and delete this record\n    Survey.remove({ _id: id }, (error) => {\n      if (error) {\n        console.log(error);\n        res.end(error);\n      }\n      else {\n        res.redirect('/survey');\n      }\n    });\n  });\n\n// make this public\nmodule.exports = router;"],"sourceRoot":"/source/"}